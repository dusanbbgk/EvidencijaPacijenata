//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EvidencijaPacijenata.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBZUstanovaEntities : DbContext
    {
        public DBZUstanovaEntities()
            : base("name=DBZUstanovaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Izvestaj> Izvestajs { get; set; }
        public virtual DbSet<Karton> Kartons { get; set; }
        public virtual DbSet<Korisnik> Korisniks { get; set; }
        public virtual DbSet<Odeljenje> Odeljenjes { get; set; }
        public virtual DbSet<RadnoVremeLekara> RadnoVremeLekaras { get; set; }
        public virtual DbSet<Uput> Uputs { get; set; }
        public virtual DbSet<Ustanova> Ustanovas { get; set; }
        public virtual DbSet<Vesti> Vestis { get; set; }
        public virtual DbSet<ZakazivanjePregleda> ZakazivanjePregledas { get; set; }
    
        public virtual ObjectResult<slobodniTermini_Result> slobodniTermini(Nullable<int> lekarId, Nullable<System.DateTime> datum, Nullable<System.TimeSpan> vreme)
        {
            var lekarIdParameter = lekarId.HasValue ?
                new ObjectParameter("lekarId", lekarId) :
                new ObjectParameter("lekarId", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            var vremeParameter = vreme.HasValue ?
                new ObjectParameter("vreme", vreme) :
                new ObjectParameter("vreme", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<slobodniTermini_Result>("slobodniTermini", lekarIdParameter, datumParameter, vremeParameter);
        }
    
        public virtual ObjectResult<pretragaPacijenata_Result> pretragaPacijenata(string pretraga, Nullable<int> iDLekara, Nullable<int> uslov)
        {
            var pretragaParameter = pretraga != null ?
                new ObjectParameter("pretraga", pretraga) :
                new ObjectParameter("pretraga", typeof(string));
    
            var iDLekaraParameter = iDLekara.HasValue ?
                new ObjectParameter("IDLekara", iDLekara) :
                new ObjectParameter("IDLekara", typeof(int));
    
            var uslovParameter = uslov.HasValue ?
                new ObjectParameter("Uslov", uslov) :
                new ObjectParameter("Uslov", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pretragaPacijenata_Result>("pretragaPacijenata", pretragaParameter, iDLekaraParameter, uslovParameter);
        }
    }
}
